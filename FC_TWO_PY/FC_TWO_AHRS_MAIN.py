from decimal import *
from FC_TWO_SEN_N2.mpu9250 import *
from FC_TWO_SEN_N2.lsm9ds1 import *
from FC_TWO_SEN_N2.util import *
from socket import *
from sys import *
from time import *

G_SI = 9.80665
PI = 3.14159


def usleep(x): return sleep(x / 1000000.0)

# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
#
#  ██████  ██████       ██ ███████  ██████ ████████ ███████
# ██    ██ ██   ██      ██ ██      ██         ██    ██
# ██    ██ ██████       ██ █████   ██         ██    ███████
# ██    ██ ██   ██ ██   ██ ██      ██         ██         ██
#  ██████  ██████   █████  ███████  ██████    ██    ███████
#
# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████


imu = MPU9250()   # MPU9250
# ahrs = AHRS()     # Mahony AHRS

# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
#
# ███████ ███████ ███    ██ ███████  ██████  ██████      ██████   █████  ████████  █████
# ██      ██      ████   ██ ██      ██    ██ ██   ██     ██   ██ ██   ██    ██    ██   ██
# ███████ █████   ██ ██  ██ ███████ ██    ██ ██████      ██   ██ ███████    ██    ███████
#      ██ ██      ██  ██ ██      ██ ██    ██ ██   ██     ██   ██ ██   ██    ██    ██   ██
# ███████ ███████ ██   ████ ███████  ██████  ██   ██     ██████  ██   ██    ██    ██   ██
#
# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████

# AccX, AccY, AccZ
# GyrX, GyrY, GyrZ
# MagX, MagY, MagZ

# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
#
#  ██████  ██████  ██ ███████ ███    ██ ████████  █████  ████████ ██  ██████  ███    ██     ██████   █████  ████████  █████
# ██    ██ ██   ██ ██ ██      ████   ██    ██    ██   ██    ██    ██ ██    ██ ████   ██     ██   ██ ██   ██    ██    ██   ██
# ██    ██ ██████  ██ █████   ██ ██  ██    ██    ███████    ██    ██ ██    ██ ██ ██  ██     ██   ██ ███████    ██    ███████
# ██    ██ ██   ██ ██ ██      ██  ██ ██    ██    ██   ██    ██    ██ ██    ██ ██  ██ ██     ██   ██ ██   ██    ██    ██   ██
#  ██████  ██   ██ ██ ███████ ██   ████    ██    ██   ██    ██    ██  ██████  ██   ████     ██████  ██   ██    ██    ██   ██
#
# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████

# Roll, Pitch, Yaw

# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
#
# ████████ ██ ███    ███ ██ ███    ██  ██████      ██████   █████  ████████  █████
#    ██    ██ ████  ████ ██ ████   ██ ██           ██   ██ ██   ██    ██    ██   ██
#    ██    ██ ██ ████ ██ ██ ██ ██  ██ ██   ███     ██   ██ ███████    ██    ███████
#    ██    ██ ██  ██  ██ ██ ██  ██ ██ ██    ██     ██   ██ ██   ██    ██    ██   ██
#    ██    ██ ██      ██ ██ ██   ████  ██████      ██████  ██   ██    ██    ██   ██
#
# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████

offset = {0: 0, 1: 0, 2: 0}

# dt, maxdt
# min_delta_time = 0.01
currenttime = 0
previoustime = 0
delta_time_summ = 0
isFirst = 1

# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
#
# ███    ██ ███████ ████████ ██     ██  ██████  ██████  ██   ██     ██████   █████  ████████  █████
# ████   ██ ██         ██    ██     ██ ██    ██ ██   ██ ██  ██      ██   ██ ██   ██    ██    ██   ██
# ██ ██  ██ █████      ██    ██  █  ██ ██    ██ ██████  █████       ██   ██ ███████    ██    ███████
# ██  ██ ██ ██         ██    ██ ███ ██ ██    ██ ██   ██ ██  ██      ██   ██ ██   ██    ██    ██   ██
# ██   ████ ███████    ██     ███ ███   ██████  ██   ██ ██   ██     ██████  ██   ██    ██    ██   ██
#
# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████

# sockfd
# struct sockaddr_in servaddr = {0};
# sendline[80]

# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
#
# ██ ███    ██ ██ ████████ ██  █████  ██          ███████ ███████ ████████ ██    ██ ██████
# ██ ████   ██ ██    ██    ██ ██   ██ ██          ██      ██         ██    ██    ██ ██   ██
# ██ ██ ██  ██ ██    ██    ██ ███████ ██          ███████ █████      ██    ██    ██ ██████
# ██ ██  ██ ██ ██    ██    ██ ██   ██ ██               ██ ██         ██    ██    ██ ██
# ██ ██   ████ ██    ██    ██ ██   ██ ███████     ███████ ███████    ██     ██████  ██
#
# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████


def imuSetup():

    # ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
    #
    # ███    ███ ██████  ██    ██     ██ ███    ██ ██ ████████ ██  █████  ██      ██ ███████  █████  ████████ ██  ██████  ███    ██
    # ████  ████ ██   ██ ██    ██     ██ ████   ██ ██    ██    ██ ██   ██ ██      ██    ███  ██   ██    ██    ██ ██    ██ ████   ██
    # ██ ████ ██ ██████  ██    ██     ██ ██ ██  ██ ██    ██    ██ ███████ ██      ██   ███   ███████    ██    ██ ██    ██ ██ ██  ██
    # ██  ██  ██ ██      ██    ██     ██ ██  ██ ██ ██    ██    ██ ██   ██ ██      ██  ███    ██   ██    ██    ██ ██    ██ ██  ██ ██
    # ██      ██ ██       ██████      ██ ██   ████ ██    ██    ██ ██   ██ ███████ ██ ███████ ██   ██    ██    ██  ██████  ██   ████
    #
    # ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████

    imu.initialize()

    print("Beginning Gyro calibration...\n")

    for i in range(100):
        gM6_AccGyr = imu.getMotion6()
        gM6_Acc = gM6_AccGyr[0]
        gM6_Gyr = gM6_AccGyr[1]
        AccX, AccY, AccZ = gM6_Acc[0], gM6_Acc[1], gM6_Acc[2]
        GyrX, GyrY, GyrZ = gM6_Gyr[0], gM6_Gyr[1], gM6_Gyr[2]

        print("    AccX: {0:10.6f}".format(AccX),
              "    AccY: {0:10.6f}".format(AccY),
              "    AccZ: {0:10.6f}".format(AccZ),
              "    GyrX: {0:10.6f}".format(GyrX),
              "    GyrY: {0:10.6f}".format(GyrY),
              "    GyrZ: {0:10.6f}".format(GyrZ))

        GyrX *= 180 / PI
        GyrY *= 180 / PI
        GyrZ *= 180 / PI

        offset[0] += (-GyrX * 0.0175)
        offset[1] += (-GyrY * 0.0175)
        offset[2] += (-GyrZ * 0.0175)

        usleep(10000)

    offset[0] /= 100.0
    offset[1] /= 100.0
    offset[2] /= 100.0

    print("Offsets are: {0}, {1}, {2}".format(offset[0], offset[1], offset[2]))
    # ahrs.setGyroOffset(offset[0], offset[1], offset[2])

# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
#
# ███    ███  █████  ██ ███    ██     ██       ██████   ██████  ██████
# ████  ████ ██   ██ ██ ████   ██     ██      ██    ██ ██    ██ ██   ██
# ██ ████ ██ ███████ ██ ██ ██  ██     ██      ██    ██ ██    ██ ██████
# ██  ██  ██ ██   ██ ██ ██  ██ ██     ██      ██    ██ ██    ██ ██
# ██      ██ ██   ██ ██ ██   ████     ███████  ██████   ██████  ██
#
# ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████


def imuLoop():

    # ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████
    #
    #  ██████  █████  ██       ██████ ██    ██ ██       █████  ████████ ███████     ██████  ███████ ██   ████████  █████      ████████ ██ ███    ███ ███████
    # ██      ██   ██ ██      ██      ██    ██ ██      ██   ██    ██    ██          ██   ██ ██      ██      ██    ██   ██        ██    ██ ████  ████ ██
    # ██      ███████ ██      ██      ██    ██ ██      ███████    ██    █████       ██   ██ █████   ██      ██    ███████        ██    ██ ██ ████ ██ █████
    # ██      ██   ██ ██      ██      ██    ██ ██      ██   ██    ██    ██          ██   ██ ██      ██      ██    ██   ██        ██    ██ ██  ██  ██ ██
    #  ██████ ██   ██ ███████  ██████  ██████  ███████ ██   ██    ██    ███████     ██████  ███████ ███████ ██    ██   ██        ██    ██ ██      ██ ███████
    #
    # ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████ ███████

    previoustime = currenttime
    currenttime = time_ns()
    delta_time = (currenttime - previoustime) / 1000000

    if delta_time < (1 / 1300):
        usleep((1 / 1300.0 - delta_time) * 1000000)

    currenttime = time_ns()
    delta_time = (currenttime - previoustime) / 1000000

    # Read raw measurements from the MPU and update AHRS

    gM6_AccGyr = imu.getMotion6()
    gM6_Acc = gM6_AccGyr[0]
    gM6_Gyr = gM6_AccGyr[1]
    AccX, AccY, AccZ = gM6_Acc[0], gM6_Acc[1], gM6_Acc[2]
    GyrX, GyrY, GyrZ = gM6_Gyr[0], gM6_Gyr[1], gM6_Gyr[2]

    AccX /= G_SI
    AccY /= G_SI
    AccZ /= G_SI
    GyrX *= 180 / PI
    GyrY *= 180 / PI
    GyrZ *= 180 / PI
    ahrs.updateIMU(AccX, AccY, AccZ, GyrX * 0.0175, GyrY * 0.0175, GyrZ * 0.0175, delta_time)

    # Accel + gyro + mag.
    # Soft and hard iron calibration required for proper function.

    # gM9_AccGyrMag = imu.getMotion9()
    # gM9_Acc = gM9_AccGyrMag[0]
    # gM9_Gyr = gM9_AccGyrMag[1]
    # gM9_Mag = gM9_AccGyrMag[2]
    # AccX, AccY, AccZ = gM9_Acc[0], gM9_Acc[1], gM9_Acc[2]
    # GyrX, GyrY, GyrZ = gM9_Gyr[0], gM9_Gyr[1], gM9_Gyr[2]
    # MagX, MagY, MagZ = gM9_Mag[0], gM9_Mag[1], gM9_Mag[2]
    #
    # ahrs.update(AccX, AccY, AccZ, GyrX*0.0175, GyrY*0.0175, GyrZ*0.0175, MagY, MagX, -MagZ, delta_time)

    # Read Euler angles

    gE = ahrs.getEuler()
    roll = gE[0]
    pitch = gE[1]
    yaw = gE[2]

    # if isFirst == 1:
    #     if delta_time > max_delta_time:
    #         maxd_delta_time = delta_time
    #     if delta_time < min_delta_time:
    #         min_delta_time = delta_time
    #
    # isFirst = 0

    delta_time_summ += delta_time
    if delta_time_summ > 0.04:
        # Console output
        print("ROLL: {0:10.6f} PITCH: {1:10.6f} YAW: {3:10.6f} PERIOD: {4:10.6f}s RATE: {6:10.6f}Hz \n", roll, pitch, yaw * -1, delta_time, int(1 / delta_time));

        # Network output
        #
        #

        delta_time_summ = 0


def main():
    check_apm()

    # Network setup
    #
    #

    # IMU setup and main loop

    imuSetup()

    while True
        imuLoop()
